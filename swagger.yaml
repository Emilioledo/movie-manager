openapi: 3.0.0
info:
  title: Movie Manager
  version: "1.0"
tags:
  - name: auth
    description: Authentication endpoints
  - name: movies
    description: Movies management endpoints
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Register a new user with a username and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthDto"
      responses:
        "201":
          description: User successfully registered.
        "409":
          description: User already exists.
  /auth/login:
    post:
      tags:
        - auth
      summary: Login a user
      description: Login a user with a username and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthDto"
      responses:
        "200":
          description: User successfully logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        "401":
          description: Unauthorized.
  /auth/change-role:
    patch:
      tags:
        - auth
      summary: Change user role
      description: Change the role of a user. Requires admin privileges.
      security:
        - JWT-auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeRoleDto"
      responses:
        "200":
          description: Role successfully changed.
        "401":
          description: Unauthorized.
  /movies/sync:
    post:
      tags:
        - movies
      summary: Sync movies with Star Wars API
      description: Synchronize movies with the Star Wars API. Requires admin privileges.
      security:
        - JWT-auth: []
      responses:
        "200":
          description: Movies successfully synchronized.
        "401":
          description: Unauthorized.
  /movies:
    get:
      tags:
        - movies
      summary: Get all movies
      description: Retrieve a list of all movies.
      responses:
        "200":
          description: A list of movies.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: The number of movies.
                  movies:
                    type: array
                    items:
                      $ref: "#/components/schemas/MovieDto"
    post:
      tags:
        - movies
      summary: Create a new movie
      description: Create a new movie with the provided details. Requires admin privileges.
      security:
        - JWT-auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMovieDto"
      responses:
        "201":
          description: Movie successfully created.
        "401":
          description: Unauthorized.
        "404":
          description: Movie already exists.
  /movies/{id}:
    get:
      tags:
        - movies
      summary: Get a movie by ID
      description: Retrieve a movie by its unique ID. Requires user privileges.
      security:
        - JWT-auth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A movie object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovieDto"
        "401":
          description: Unauthorized.
        "404":
          description: Movie not found.
    patch:
      tags:
        - movies
      summary: Update a movie by ID
      description: Update a movie's details by its unique ID. Requires admin privileges.
      security:
        - JWT-auth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMovieDto"
      responses:
        "200":
          description: Movie successfully updated.
        "401":
          description: Unauthorized.
        "404":
          description: Movie not found.
    delete:
      tags:
        - movies
      summary: Delete a movie by ID
      description: Delete a movie by its unique ID. Requires admin privileges.
      security:
        - JWT-auth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Movie successfully deleted.
        "401":
          description: Unauthorized.
        "404":
          description: Movie not found.
components:
  securitySchemes:
    JWT-auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter JWT token
  schemas:
    AuthDto:
      type: object
      properties:
        username:
          type: string
          description: The username of the user.
        password:
          type: string
          description: The password of the user.
      required:
        - username
        - password
    ChangeRoleDto:
      type: object
      properties:
        username:
          type: string
          description: The username of the user whose role will be changed.
        role:
          type: string
          enum: [admin, user]
          description: The new role to assign to the user.
      required:
        - username
        - role
    MovieDto:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the movie.
        title:
          type: string
          description: The title of the movie.
        director:
          type: string
          description: The director of the movie.
        producer:
          type: string
          description: The producer of the movie.
        release_date:
          type: string
          format: date
          description: The release date of the movie.
        created:
          type: string
          format: date-time
          description: The creation date of the movie record.
        edited:
          type: string
          format: date-time
          description: The last edit date of the movie record.
      required:
        - title
        - director
        - producer
        - release_date
    CreateMovieDto:
      type: object
      properties:
        title:
          type: string
          description: The title of the movie.
        director:
          type: string
          description: The director of the movie.
        producer:
          type: string
          description: The producer of the movie.
        release_date:
          type: string
          format: date
          description: The release date of the movie.
      required:
        - title
        - director
        - producer
        - release_date
    UpdateMovieDto:
      type: object
      properties:
        title:
          type: string
          description: The title of the movie.
        director:
          type: string
          description: The director of the movie.
        producer:
          type: string
          description: The producer of the movie.
        release_date:
          type: string
          format: date
          description: The release date of the movie.
      required:
        - title
        - director
        - producer
        - release_date
